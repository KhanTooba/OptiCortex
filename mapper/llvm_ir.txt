WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

Function: factorial
LLVM IR Instruction [0]:   call void @llvm.dbg.value(metadata i32 %0, metadata !12, metadata !DIExpression()), !dbg !13
LLVM IR Instruction [1]:   %2 = icmp slt i32 %0, 2, !dbg !14
LLVM IR Instruction [2]:   br i1 %2, label %79, label %3, !dbg !16
LLVM IR Instruction [3]:   %4 = add i32 %0, -1, !dbg !16
LLVM IR Instruction [4]:   %5 = icmp ult i32 %4, 8, !dbg !16
LLVM IR Instruction [5]:   br i1 %5, label %70, label %6, !dbg !16
LLVM IR Instruction [6]:   %7 = and i32 %4, -8, !dbg !16
LLVM IR Instruction [7]:   %8 = sub i32 %0, %7, !dbg !16
LLVM IR Instruction [8]:   %9 = insertelement <4 x i32> undef, i32 %0, i32 0, !dbg !16
LLVM IR Instruction [9]:   %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer, !dbg !16
LLVM IR Instruction [10]:   %11 = add <4 x i32> %10, <i32 0, i32 -1, i32 -2, i32 -3>, !dbg !16
LLVM IR Instruction [11]:   %12 = add i32 %7, -8, !dbg !16
LLVM IR Instruction [12]:   %13 = lshr exact i32 %12, 3, !dbg !16
LLVM IR Instruction [13]:   %14 = add nuw nsw i32 %13, 1, !dbg !16
LLVM IR Instruction [14]:   %15 = and i32 %14, 3, !dbg !16
LLVM IR Instruction [15]:   %16 = icmp ult i32 %12, 24, !dbg !16
LLVM IR Instruction [16]:   br i1 %16, label %42, label %17, !dbg !16
LLVM IR Instruction [17]:   %18 = sub nsw i32 %14, %15, !dbg !16
LLVM IR Instruction [18]:   br label %19, !dbg !16
LLVM IR Instruction [19]:   %20 = phi <4 x i32> [ %11, %17 ], [ %39, %19 ]
LLVM IR Instruction [20]:   %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %37, %19 ]
LLVM IR Instruction [21]:   %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %38, %19 ]
LLVM IR Instruction [22]:   %23 = phi i32 [ %18, %17 ], [ %40, %19 ]
LLVM IR Instruction [23]:   %24 = add <4 x i32> %20, <i32 -4, i32 -4, i32 -4, i32 -4>
LLVM IR Instruction [24]:   %25 = mul <4 x i32> %20, %21, !dbg !17
LLVM IR Instruction [25]:   %26 = mul <4 x i32> %24, %22, !dbg !17
LLVM IR Instruction [26]:   %27 = add <4 x i32> %20, <i32 -8, i32 -8, i32 -8, i32 -8>
LLVM IR Instruction [27]:   %28 = add <4 x i32> %20, <i32 -12, i32 -12, i32 -12, i32 -12>
LLVM IR Instruction [28]:   %29 = mul <4 x i32> %27, %25, !dbg !17
LLVM IR Instruction [29]:   %30 = mul <4 x i32> %28, %26, !dbg !17
LLVM IR Instruction [30]:   %31 = add <4 x i32> %20, <i32 -16, i32 -16, i32 -16, i32 -16>
LLVM IR Instruction [31]:   %32 = add <4 x i32> %20, <i32 -20, i32 -20, i32 -20, i32 -20>
LLVM IR Instruction [32]:   %33 = mul <4 x i32> %31, %29, !dbg !17
LLVM IR Instruction [33]:   %34 = mul <4 x i32> %32, %30, !dbg !17
LLVM IR Instruction [34]:   %35 = add <4 x i32> %20, <i32 -24, i32 -24, i32 -24, i32 -24>
LLVM IR Instruction [35]:   %36 = add <4 x i32> %20, <i32 -28, i32 -28, i32 -28, i32 -28>
LLVM IR Instruction [36]:   %37 = mul <4 x i32> %35, %33, !dbg !17
LLVM IR Instruction [37]:   %38 = mul <4 x i32> %36, %34, !dbg !17
LLVM IR Instruction [38]:   %39 = add <4 x i32> %20, <i32 -32, i32 -32, i32 -32, i32 -32>
LLVM IR Instruction [39]:   %40 = add i32 %23, -4
LLVM IR Instruction [40]:   %41 = icmp eq i32 %40, 0
LLVM IR Instruction [41]:   br i1 %41, label %42, label %19, !llvm.loop !18
LLVM IR Instruction [42]:   %43 = phi <4 x i32> [ undef, %6 ], [ %37, %19 ]
LLVM IR Instruction [43]:   %44 = phi <4 x i32> [ undef, %6 ], [ %38, %19 ]
LLVM IR Instruction [44]:   %45 = phi <4 x i32> [ %11, %6 ], [ %39, %19 ]
LLVM IR Instruction [45]:   %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %6 ], [ %37, %19 ]
LLVM IR Instruction [46]:   %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %6 ], [ %38, %19 ]
LLVM IR Instruction [47]:   %48 = icmp eq i32 %15, 0
LLVM IR Instruction [48]:   br i1 %48, label %60, label %49
LLVM IR Instruction [49]:   %50 = phi <4 x i32> [ %57, %49 ], [ %45, %42 ]
LLVM IR Instruction [50]:   %51 = phi <4 x i32> [ %55, %49 ], [ %46, %42 ]
LLVM IR Instruction [51]:   %52 = phi <4 x i32> [ %56, %49 ], [ %47, %42 ]
LLVM IR Instruction [52]:   %53 = phi i32 [ %58, %49 ], [ %15, %42 ]
LLVM IR Instruction [53]:   %54 = add <4 x i32> %50, <i32 -4, i32 -4, i32 -4, i32 -4>
LLVM IR Instruction [54]:   %55 = mul <4 x i32> %50, %51, !dbg !17
LLVM IR Instruction [55]:   %56 = mul <4 x i32> %54, %52, !dbg !17
LLVM IR Instruction [56]:   %57 = add <4 x i32> %50, <i32 -8, i32 -8, i32 -8, i32 -8>
LLVM IR Instruction [57]:   %58 = add i32 %53, -1
LLVM IR Instruction [58]:   %59 = icmp eq i32 %58, 0
LLVM IR Instruction [59]:   br i1 %59, label %60, label %49, !llvm.loop !20
LLVM IR Instruction [60]:   %61 = phi <4 x i32> [ %43, %42 ], [ %55, %49 ], !dbg !17
LLVM IR Instruction [61]:   %62 = phi <4 x i32> [ %44, %42 ], [ %56, %49 ], !dbg !17
LLVM IR Instruction [62]:   %63 = mul <4 x i32> %62, %61, !dbg !16
LLVM IR Instruction [63]:   %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !16
LLVM IR Instruction [64]:   %65 = mul <4 x i32> %63, %64, !dbg !16
LLVM IR Instruction [65]:   %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !16
LLVM IR Instruction [66]:   %67 = mul <4 x i32> %65, %66, !dbg !16
LLVM IR Instruction [67]:   %68 = extractelement <4 x i32> %67, i32 0, !dbg !16
LLVM IR Instruction [68]:   %69 = icmp eq i32 %4, %7, !dbg !16
LLVM IR Instruction [69]:   br i1 %69, label %79, label %70, !dbg !16
LLVM IR Instruction [70]:   %71 = phi i32 [ %0, %3 ], [ %8, %60 ]
LLVM IR Instruction [71]:   %72 = phi i32 [ 1, %3 ], [ %68, %60 ]
LLVM IR Instruction [72]:   br label %73, !dbg !16
LLVM IR Instruction [73]:   %74 = phi i32 [ %76, %73 ], [ %71, %70 ]
LLVM IR Instruction [74]:   %75 = phi i32 [ %77, %73 ], [ %72, %70 ]
LLVM IR Instruction [75]:   call void @llvm.dbg.value(metadata i32 %74, metadata !12, metadata !DIExpression()), !dbg !13
LLVM IR Instruction [76]:   %76 = add nsw i32 %74, -1, !dbg !22
LLVM IR Instruction [77]:   %77 = mul nsw i32 %74, %75, !dbg !17
LLVM IR Instruction [78]:   call void @llvm.dbg.value(metadata i32 %76, metadata !12, metadata !DIExpression()), !dbg !13
LLVM IR Instruction [79]:   %78 = icmp slt i32 %74, 3, !dbg !14
LLVM IR Instruction [80]:   br i1 %78, label %79, label %73, !dbg !16, !llvm.loop !23
LLVM IR Instruction [81]:   %80 = phi i32 [ 1, %1 ], [ %68, %60 ], [ %77, %73 ]
LLVM IR Instruction [82]:   ret i32 %80, !dbg !25
Function: main
LLVM IR Instruction [0]:   %1 = alloca i32, align 4
LLVM IR Instruction [1]:   %2 = bitcast i32* %1 to i8*, !dbg !13
LLVM IR Instruction [2]:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #6, !dbg !13
LLVM IR Instruction [3]:   %3 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)), !dbg !14
LLVM IR Instruction [4]:   call void @llvm.dbg.value(metadata i32* %1, metadata !30, metadata !DIExpression(DW_OP_deref)), !dbg !33
LLVM IR Instruction [5]:   %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %1), !dbg !16
LLVM IR Instruction [6]:   %5 = load i32, i32* %1, align 4, !dbg !17, !tbaa !19
LLVM IR Instruction [7]:   call void @llvm.dbg.value(metadata i32 %5, metadata !30, metadata !DIExpression()), !dbg !33
LLVM IR Instruction [8]:   %6 = icmp slt i32 %5, 0, !dbg !23
LLVM IR Instruction [9]:   br i1 %6, label %7, label %9, !dbg !24
LLVM IR Instruction [10]:   %8 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([47 x i8], [47 x i8]* @str, i64 0, i64 0)), !dbg !25
LLVM IR Instruction [11]:   br label %90, !dbg !25
LLVM IR Instruction [12]:   call void @llvm.dbg.value(metadata i32 %5, metadata !12, metadata !DIExpression()), !dbg !44
LLVM IR Instruction [13]:   %10 = icmp slt i32 %5, 2, !dbg !33
LLVM IR Instruction [14]:   br i1 %10, label %87, label %11, !dbg !35
LLVM IR Instruction [15]:   %12 = add i32 %5, -1, !dbg !35
LLVM IR Instruction [16]:   %13 = icmp ult i32 %12, 8, !dbg !35
LLVM IR Instruction [17]:   br i1 %13, label %78, label %14, !dbg !35
LLVM IR Instruction [18]:   %15 = and i32 %12, -8, !dbg !35
LLVM IR Instruction [19]:   %16 = sub i32 %5, %15, !dbg !35
LLVM IR Instruction [20]:   %17 = insertelement <4 x i32> undef, i32 %5, i32 0, !dbg !35
LLVM IR Instruction [21]:   %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer, !dbg !35
LLVM IR Instruction [22]:   %19 = add <4 x i32> %18, <i32 0, i32 -1, i32 -2, i32 -3>, !dbg !35
LLVM IR Instruction [23]:   %20 = add i32 %15, -8, !dbg !35
LLVM IR Instruction [24]:   %21 = lshr exact i32 %20, 3, !dbg !35
LLVM IR Instruction [25]:   %22 = add nuw nsw i32 %21, 1, !dbg !35
LLVM IR Instruction [26]:   %23 = and i32 %22, 3, !dbg !35
LLVM IR Instruction [27]:   %24 = icmp ult i32 %20, 24, !dbg !35
LLVM IR Instruction [28]:   br i1 %24, label %50, label %25, !dbg !35
LLVM IR Instruction [29]:   %26 = sub nsw i32 %22, %23, !dbg !35
LLVM IR Instruction [30]:   br label %27, !dbg !35
LLVM IR Instruction [31]:   %28 = phi <4 x i32> [ %19, %25 ], [ %47, %27 ]
LLVM IR Instruction [32]:   %29 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %45, %27 ]
LLVM IR Instruction [33]:   %30 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %46, %27 ]
LLVM IR Instruction [34]:   %31 = phi i32 [ %26, %25 ], [ %48, %27 ]
LLVM IR Instruction [35]:   %32 = add <4 x i32> %28, <i32 -4, i32 -4, i32 -4, i32 -4>
LLVM IR Instruction [36]:   %33 = mul <4 x i32> %29, %28, !dbg !36
LLVM IR Instruction [37]:   %34 = mul <4 x i32> %30, %32, !dbg !36
LLVM IR Instruction [38]:   %35 = add <4 x i32> %28, <i32 -8, i32 -8, i32 -8, i32 -8>
LLVM IR Instruction [39]:   %36 = add <4 x i32> %28, <i32 -12, i32 -12, i32 -12, i32 -12>
LLVM IR Instruction [40]:   %37 = mul <4 x i32> %33, %35, !dbg !36
LLVM IR Instruction [41]:   %38 = mul <4 x i32> %34, %36, !dbg !36
LLVM IR Instruction [42]:   %39 = add <4 x i32> %28, <i32 -16, i32 -16, i32 -16, i32 -16>
LLVM IR Instruction [43]:   %40 = add <4 x i32> %28, <i32 -20, i32 -20, i32 -20, i32 -20>
LLVM IR Instruction [44]:   %41 = mul <4 x i32> %37, %39, !dbg !36
LLVM IR Instruction [45]:   %42 = mul <4 x i32> %38, %40, !dbg !36
LLVM IR Instruction [46]:   %43 = add <4 x i32> %28, <i32 -24, i32 -24, i32 -24, i32 -24>
LLVM IR Instruction [47]:   %44 = add <4 x i32> %28, <i32 -28, i32 -28, i32 -28, i32 -28>
LLVM IR Instruction [48]:   %45 = mul <4 x i32> %41, %43, !dbg !36
LLVM IR Instruction [49]:   %46 = mul <4 x i32> %42, %44, !dbg !36
LLVM IR Instruction [50]:   %47 = add <4 x i32> %28, <i32 -32, i32 -32, i32 -32, i32 -32>
LLVM IR Instruction [51]:   %48 = add i32 %31, -4
LLVM IR Instruction [52]:   %49 = icmp eq i32 %48, 0
LLVM IR Instruction [53]:   br i1 %49, label %50, label %27, !llvm.loop !37
LLVM IR Instruction [54]:   %51 = phi <4 x i32> [ undef, %14 ], [ %45, %27 ]
LLVM IR Instruction [55]:   %52 = phi <4 x i32> [ undef, %14 ], [ %46, %27 ]
LLVM IR Instruction [56]:   %53 = phi <4 x i32> [ %19, %14 ], [ %47, %27 ]
LLVM IR Instruction [57]:   %54 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %14 ], [ %45, %27 ]
LLVM IR Instruction [58]:   %55 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %14 ], [ %46, %27 ]
LLVM IR Instruction [59]:   %56 = icmp eq i32 %23, 0
LLVM IR Instruction [60]:   br i1 %56, label %68, label %57
LLVM IR Instruction [61]:   %58 = phi <4 x i32> [ %65, %57 ], [ %53, %50 ]
LLVM IR Instruction [62]:   %59 = phi <4 x i32> [ %63, %57 ], [ %54, %50 ]
LLVM IR Instruction [63]:   %60 = phi <4 x i32> [ %64, %57 ], [ %55, %50 ]
LLVM IR Instruction [64]:   %61 = phi i32 [ %66, %57 ], [ %23, %50 ]
LLVM IR Instruction [65]:   %62 = add <4 x i32> %58, <i32 -4, i32 -4, i32 -4, i32 -4>
LLVM IR Instruction [66]:   %63 = mul <4 x i32> %59, %58, !dbg !36
LLVM IR Instruction [67]:   %64 = mul <4 x i32> %60, %62, !dbg !36
LLVM IR Instruction [68]:   %65 = add <4 x i32> %58, <i32 -8, i32 -8, i32 -8, i32 -8>
LLVM IR Instruction [69]:   %66 = add i32 %61, -1
LLVM IR Instruction [70]:   %67 = icmp eq i32 %66, 0
LLVM IR Instruction [71]:   br i1 %67, label %68, label %57, !llvm.loop !39
LLVM IR Instruction [72]:   %69 = phi <4 x i32> [ %51, %50 ], [ %63, %57 ], !dbg !36
LLVM IR Instruction [73]:   %70 = phi <4 x i32> [ %52, %50 ], [ %64, %57 ], !dbg !36
LLVM IR Instruction [74]:   %71 = mul <4 x i32> %70, %69, !dbg !35
LLVM IR Instruction [75]:   %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !35
LLVM IR Instruction [76]:   %73 = mul <4 x i32> %71, %72, !dbg !35
LLVM IR Instruction [77]:   %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !35
LLVM IR Instruction [78]:   %75 = mul <4 x i32> %73, %74, !dbg !35
LLVM IR Instruction [79]:   %76 = extractelement <4 x i32> %75, i32 0, !dbg !35
LLVM IR Instruction [80]:   %77 = icmp eq i32 %12, %15, !dbg !35
LLVM IR Instruction [81]:   br i1 %77, label %87, label %78, !dbg !35
LLVM IR Instruction [82]:   %79 = phi i32 [ %5, %11 ], [ %16, %68 ]
LLVM IR Instruction [83]:   %80 = phi i32 [ 1, %11 ], [ %76, %68 ]
LLVM IR Instruction [84]:   br label %81, !dbg !35
LLVM IR Instruction [85]:   %82 = phi i32 [ %84, %81 ], [ %79, %78 ]
LLVM IR Instruction [86]:   %83 = phi i32 [ %85, %81 ], [ %80, %78 ]
LLVM IR Instruction [87]:   call void @llvm.dbg.value(metadata i32 %82, metadata !12, metadata !DIExpression()), !dbg !44
LLVM IR Instruction [88]:   %84 = add nsw i32 %82, -1, !dbg !41
LLVM IR Instruction [89]:   %85 = mul nsw i32 %83, %82, !dbg !36
LLVM IR Instruction [90]:   call void @llvm.dbg.value(metadata i32 %84, metadata !12, metadata !DIExpression()), !dbg !44
LLVM IR Instruction [91]:   %86 = icmp slt i32 %82, 3, !dbg !33
LLVM IR Instruction [92]:   br i1 %86, label %87, label %81, !dbg !35, !llvm.loop !42
LLVM IR Instruction [93]:   %88 = phi i32 [ 1, %9 ], [ %76, %68 ], [ %85, %81 ]
LLVM IR Instruction [94]:   %89 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 %5, i32 %88), !dbg !44
LLVM IR Instruction [95]:   br label %90
LLVM IR Instruction [96]:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #6, !dbg !45
LLVM IR Instruction [97]:   ret i32 0, !dbg !46
