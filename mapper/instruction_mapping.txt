WARNING: You're attempting to print out a bitcode file.		.text
This is inadvisable as it may cause display problems. If		.file	"test1.c"
you REALLY want to taste LLVM bitcode first-hand, you		.section	.rodata.cst16,"aM",@progbits,16
can force output with the `-f' option.		.p2align	4               # -- Begin function factorial
	.LCPI0_0:
Function: factorial		.long	0                       # 0x0
LLVM IR Instruction [0]:   call void @llvm.dbg.value(metadata i32 %0, metadata !12, metadata !DIExpression()), !dbg !13		.long	4294967295              # 0xffffffff
LLVM IR Instruction [1]:   %2 = icmp slt i32 %0, 2, !dbg !14		.long	4294967294              # 0xfffffffe
LLVM IR Instruction [2]:   br i1 %2, label %79, label %3, !dbg !16		.long	4294967293              # 0xfffffffd
LLVM IR Instruction [3]:   %4 = add i32 %0, -1, !dbg !16	.LCPI0_1:
LLVM IR Instruction [4]:   %5 = icmp ult i32 %4, 8, !dbg !16		.long	1                       # 0x1
LLVM IR Instruction [5]:   br i1 %5, label %70, label %6, !dbg !16		.long	1                       # 0x1
LLVM IR Instruction [6]:   %7 = and i32 %4, -8, !dbg !16		.long	1                       # 0x1
LLVM IR Instruction [7]:   %8 = sub i32 %0, %7, !dbg !16		.long	1                       # 0x1
LLVM IR Instruction [8]:   %9 = insertelement <4 x i32> undef, i32 %0, i32 0, !dbg !16	.LCPI0_2:
LLVM IR Instruction [9]:   %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer, !dbg !16		.long	4294967292              # 0xfffffffc
LLVM IR Instruction [10]:   %11 = add <4 x i32> %10, <i32 0, i32 -1, i32 -2, i32 -3>, !dbg !16		.long	4294967292              # 0xfffffffc
LLVM IR Instruction [11]:   %12 = add i32 %7, -8, !dbg !16		.long	4294967292              # 0xfffffffc
LLVM IR Instruction [12]:   %13 = lshr exact i32 %12, 3, !dbg !16		.long	4294967292              # 0xfffffffc
LLVM IR Instruction [13]:   %14 = add nuw nsw i32 %13, 1, !dbg !16	.LCPI0_3:
LLVM IR Instruction [14]:   %15 = and i32 %14, 3, !dbg !16		.long	4294967288              # 0xfffffff8
LLVM IR Instruction [15]:   %16 = icmp ult i32 %12, 24, !dbg !16		.long	4294967288              # 0xfffffff8
LLVM IR Instruction [16]:   br i1 %16, label %42, label %17, !dbg !16		.long	4294967288              # 0xfffffff8
LLVM IR Instruction [17]:   %18 = sub nsw i32 %14, %15, !dbg !16		.long	4294967288              # 0xfffffff8
LLVM IR Instruction [18]:   br label %19, !dbg !16	.LCPI0_4:
LLVM IR Instruction [19]:   %20 = phi <4 x i32> [ %11, %17 ], [ %39, %19 ]		.long	4294967284              # 0xfffffff4
LLVM IR Instruction [20]:   %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %37, %19 ]		.long	4294967284              # 0xfffffff4
LLVM IR Instruction [21]:   %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %38, %19 ]		.long	4294967284              # 0xfffffff4
LLVM IR Instruction [22]:   %23 = phi i32 [ %18, %17 ], [ %40, %19 ]		.long	4294967284              # 0xfffffff4
LLVM IR Instruction [23]:   %24 = add <4 x i32> %20, <i32 -4, i32 -4, i32 -4, i32 -4>	.LCPI0_5:
LLVM IR Instruction [24]:   %25 = mul <4 x i32> %20, %21, !dbg !17		.long	4294967280              # 0xfffffff0
LLVM IR Instruction [25]:   %26 = mul <4 x i32> %24, %22, !dbg !17		.long	4294967280              # 0xfffffff0
LLVM IR Instruction [26]:   %27 = add <4 x i32> %20, <i32 -8, i32 -8, i32 -8, i32 -8>		.long	4294967280              # 0xfffffff0
LLVM IR Instruction [27]:   %28 = add <4 x i32> %20, <i32 -12, i32 -12, i32 -12, i32 -12>		.long	4294967280              # 0xfffffff0
LLVM IR Instruction [28]:   %29 = mul <4 x i32> %27, %25, !dbg !17	.LCPI0_6:
LLVM IR Instruction [29]:   %30 = mul <4 x i32> %28, %26, !dbg !17		.long	4294967276              # 0xffffffec
LLVM IR Instruction [30]:   %31 = add <4 x i32> %20, <i32 -16, i32 -16, i32 -16, i32 -16>		.long	4294967276              # 0xffffffec
LLVM IR Instruction [31]:   %32 = add <4 x i32> %20, <i32 -20, i32 -20, i32 -20, i32 -20>		.long	4294967276              # 0xffffffec
LLVM IR Instruction [32]:   %33 = mul <4 x i32> %31, %29, !dbg !17		.long	4294967276              # 0xffffffec
LLVM IR Instruction [33]:   %34 = mul <4 x i32> %32, %30, !dbg !17	.LCPI0_7:
LLVM IR Instruction [34]:   %35 = add <4 x i32> %20, <i32 -24, i32 -24, i32 -24, i32 -24>		.long	4294967272              # 0xffffffe8
LLVM IR Instruction [35]:   %36 = add <4 x i32> %20, <i32 -28, i32 -28, i32 -28, i32 -28>		.long	4294967272              # 0xffffffe8
LLVM IR Instruction [36]:   %37 = mul <4 x i32> %35, %33, !dbg !17		.long	4294967272              # 0xffffffe8
LLVM IR Instruction [37]:   %38 = mul <4 x i32> %36, %34, !dbg !17		.long	4294967272              # 0xffffffe8
LLVM IR Instruction [38]:   %39 = add <4 x i32> %20, <i32 -32, i32 -32, i32 -32, i32 -32>	.LCPI0_8:
LLVM IR Instruction [39]:   %40 = add i32 %23, -4		.long	4294967268              # 0xffffffe4
LLVM IR Instruction [40]:   %41 = icmp eq i32 %40, 0		.long	4294967268              # 0xffffffe4
LLVM IR Instruction [41]:   br i1 %41, label %42, label %19, !llvm.loop !18		.long	4294967268              # 0xffffffe4
LLVM IR Instruction [42]:   %43 = phi <4 x i32> [ undef, %6 ], [ %37, %19 ]		.long	4294967268              # 0xffffffe4
LLVM IR Instruction [43]:   %44 = phi <4 x i32> [ undef, %6 ], [ %38, %19 ]	.LCPI0_9:
LLVM IR Instruction [44]:   %45 = phi <4 x i32> [ %11, %6 ], [ %39, %19 ]		.long	4294967264              # 0xffffffe0
LLVM IR Instruction [45]:   %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %6 ], [ %37, %19 ]		.long	4294967264              # 0xffffffe0
LLVM IR Instruction [46]:   %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %6 ], [ %38, %19 ]		.long	4294967264              # 0xffffffe0
LLVM IR Instruction [47]:   %48 = icmp eq i32 %15, 0		.long	4294967264              # 0xffffffe0
LLVM IR Instruction [48]:   br i1 %48, label %60, label %49		.text
LLVM IR Instruction [49]:   %50 = phi <4 x i32> [ %57, %49 ], [ %45, %42 ]		.globl	factorial
LLVM IR Instruction [50]:   %51 = phi <4 x i32> [ %55, %49 ], [ %46, %42 ]		.p2align	4, 0x90
LLVM IR Instruction [51]:   %52 = phi <4 x i32> [ %56, %49 ], [ %47, %42 ]		.type	factorial,@function
LLVM IR Instruction [52]:   %53 = phi i32 [ %58, %49 ], [ %15, %42 ]	factorial:                              # @factorial
LLVM IR Instruction [53]:   %54 = add <4 x i32> %50, <i32 -4, i32 -4, i32 -4, i32 -4>	.Lfunc_begin0:
LLVM IR Instruction [54]:   %55 = mul <4 x i32> %50, %51, !dbg !17		.file	1 "/home/toobak/OptiCortex/mapper/test/test1.c"
LLVM IR Instruction [55]:   %56 = mul <4 x i32> %54, %52, !dbg !17		.loc	1 3 0                   # test/test1.c:3:0
LLVM IR Instruction [56]:   %57 = add <4 x i32> %50, <i32 -8, i32 -8, i32 -8, i32 -8>		.cfi_startproc
LLVM IR Instruction [57]:   %58 = add i32 %53, -1	# %bb.0:
LLVM IR Instruction [58]:   %59 = icmp eq i32 %58, 0		pushl	%ebx
LLVM IR Instruction [59]:   br i1 %59, label %60, label %49, !llvm.loop !20		.cfi_def_cfa_offset 8
LLVM IR Instruction [60]:   %61 = phi <4 x i32> [ %43, %42 ], [ %55, %49 ], !dbg !17		pushl	%edi
LLVM IR Instruction [61]:   %62 = phi <4 x i32> [ %44, %42 ], [ %56, %49 ], !dbg !17		.cfi_def_cfa_offset 12
LLVM IR Instruction [62]:   %63 = mul <4 x i32> %62, %61, !dbg !16		pushl	%esi
LLVM IR Instruction [63]:   %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !16		.cfi_def_cfa_offset 16
LLVM IR Instruction [64]:   %65 = mul <4 x i32> %63, %64, !dbg !16		.cfi_offset %esi, -16
LLVM IR Instruction [65]:   %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !16		.cfi_offset %edi, -12
LLVM IR Instruction [66]:   %67 = mul <4 x i32> %65, %66, !dbg !16		.cfi_offset %ebx, -8
LLVM IR Instruction [67]:   %68 = extractelement <4 x i32> %67, i32 0, !dbg !16		movl	16(%esp), %ecx
LLVM IR Instruction [68]:   %69 = icmp eq i32 %4, %7, !dbg !16		movl	$1, %eax
LLVM IR Instruction [69]:   br i1 %69, label %79, label %70, !dbg !16	.Ltmp0:
LLVM IR Instruction [70]:   %71 = phi i32 [ %0, %3 ], [ %8, %60 ]		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [71]:   %72 = phi i32 [ 1, %3 ], [ %68, %60 ]		.loc	1 4 11 prologue_end     # test/test1.c:4:11
LLVM IR Instruction [72]:   br label %73, !dbg !16		cmpl	$2, %ecx
LLVM IR Instruction [73]:   %74 = phi i32 [ %76, %73 ], [ %71, %70 ]	.Ltmp1:
LLVM IR Instruction [74]:   %75 = phi i32 [ %77, %73 ], [ %72, %70 ]		.loc	1 4 9 is_stmt 0         # test/test1.c:4:9
LLVM IR Instruction [75]:   call void @llvm.dbg.value(metadata i32 %74, metadata !12, metadata !DIExpression()), !dbg !13		jl	.LBB0_12
LLVM IR Instruction [76]:   %76 = add nsw i32 %74, -1, !dbg !22	.Ltmp2:
LLVM IR Instruction [77]:   %77 = mul nsw i32 %74, %75, !dbg !17	# %bb.1:
LLVM IR Instruction [78]:   call void @llvm.dbg.value(metadata i32 %76, metadata !12, metadata !DIExpression()), !dbg !13		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [79]:   %78 = icmp slt i32 %74, 3, !dbg !14		leal	-1(%ecx), %edx
LLVM IR Instruction [80]:   br i1 %78, label %79, label %73, !dbg !16, !llvm.loop !23		movl	$1, %eax
LLVM IR Instruction [81]:   %80 = phi i32 [ 1, %1 ], [ %68, %60 ], [ %77, %73 ]		cmpl	$8, %edx
LLVM IR Instruction [82]:   ret i32 %80, !dbg !25		jb	.LBB0_11
Function: main	.Ltmp3:
LLVM IR Instruction [0]:   %1 = alloca i32, align 4	# %bb.2:
LLVM IR Instruction [1]:   %2 = bitcast i32* %1 to i8*, !dbg !13		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [2]:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #6, !dbg !13		movl	%edx, %esi
LLVM IR Instruction [3]:   %3 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)), !dbg !14		andl	$-8, %esi
LLVM IR Instruction [4]:   call void @llvm.dbg.value(metadata i32* %1, metadata !30, metadata !DIExpression(DW_OP_deref)), !dbg !33		movd	%ecx, %xmm0
LLVM IR Instruction [5]:   %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %1), !dbg !16		pshufd	$0, %xmm0, %xmm6        # xmm6 = xmm0[0,0,0,0]
LLVM IR Instruction [6]:   %5 = load i32, i32* %1, align 4, !dbg !17, !tbaa !19		paddd	.LCPI0_0, %xmm6
LLVM IR Instruction [7]:   call void @llvm.dbg.value(metadata i32 %5, metadata !30, metadata !DIExpression()), !dbg !33		leal	-8(%esi), %edi
LLVM IR Instruction [8]:   %6 = icmp slt i32 %5, 0, !dbg !23		movl	%edi, %ebx
LLVM IR Instruction [9]:   br i1 %6, label %7, label %9, !dbg !24		shrl	$3, %ebx
LLVM IR Instruction [10]:   %8 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([47 x i8], [47 x i8]* @str, i64 0, i64 0)), !dbg !25		addl	$1, %ebx
LLVM IR Instruction [11]:   br label %90, !dbg !25		movl	%ebx, %eax
LLVM IR Instruction [12]:   call void @llvm.dbg.value(metadata i32 %5, metadata !12, metadata !DIExpression()), !dbg !44		andl	$3, %eax
LLVM IR Instruction [13]:   %10 = icmp slt i32 %5, 2, !dbg !33		cmpl	$24, %edi
LLVM IR Instruction [14]:   br i1 %10, label %87, label %11, !dbg !35		jae	.LBB0_4
LLVM IR Instruction [15]:   %12 = add i32 %5, -1, !dbg !35	.Ltmp4:
LLVM IR Instruction [16]:   %13 = icmp ult i32 %12, 8, !dbg !35	# %bb.3:
LLVM IR Instruction [17]:   br i1 %13, label %78, label %14, !dbg !35		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [18]:   %15 = and i32 %12, -8, !dbg !35		.loc	1 0 9                   # test/test1.c:0:9
LLVM IR Instruction [19]:   %16 = sub i32 %5, %15, !dbg !35		movdqa	.LCPI0_1, %xmm1         # xmm1 = [1,1,1,1]
LLVM IR Instruction [20]:   %17 = insertelement <4 x i32> undef, i32 %5, i32 0, !dbg !35		movdqa	%xmm1, %xmm4
LLVM IR Instruction [21]:   %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer, !dbg !35		jmp	.LBB0_6
LLVM IR Instruction [22]:   %19 = add <4 x i32> %18, <i32 0, i32 -1, i32 -2, i32 -3>, !dbg !35	.Ltmp5:
LLVM IR Instruction [23]:   %20 = add i32 %15, -8, !dbg !35	.LBB0_4:
LLVM IR Instruction [24]:   %21 = lshr exact i32 %20, 3, !dbg !35		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [25]:   %22 = add nuw nsw i32 %21, 1, !dbg !35		.loc	1 4 9                   # test/test1.c:4:9
LLVM IR Instruction [26]:   %23 = and i32 %22, 3, !dbg !35		movl	%eax, %edi
LLVM IR Instruction [27]:   %24 = icmp ult i32 %20, 24, !dbg !35		subl	%ebx, %edi
LLVM IR Instruction [28]:   br i1 %24, label %50, label %25, !dbg !35		movdqa	.LCPI0_1, %xmm1         # xmm1 = [1,1,1,1]
LLVM IR Instruction [29]:   %26 = sub nsw i32 %22, %23, !dbg !35		movdqa	%xmm1, %xmm4
LLVM IR Instruction [30]:   br label %27, !dbg !35	.Ltmp6:
LLVM IR Instruction [31]:   %28 = phi <4 x i32> [ %19, %25 ], [ %47, %27 ]		.p2align	4, 0x90
LLVM IR Instruction [32]:   %29 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %45, %27 ]	.LBB0_5:                                # =>This Inner Loop Header: Depth=1
LLVM IR Instruction [33]:   %30 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %46, %27 ]		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [34]:   %31 = phi i32 [ %26, %25 ], [ %48, %27 ]		.loc	1 0 9                   # test/test1.c:0:9
LLVM IR Instruction [35]:   %32 = add <4 x i32> %28, <i32 -4, i32 -4, i32 -4, i32 -4>		movdqa	%xmm6, %xmm0
LLVM IR Instruction [36]:   %33 = mul <4 x i32> %29, %28, !dbg !36		paddd	.LCPI0_2, %xmm0
LLVM IR Instruction [37]:   %34 = mul <4 x i32> %30, %32, !dbg !36	.Ltmp7:
LLVM IR Instruction [38]:   %35 = add <4 x i32> %28, <i32 -8, i32 -8, i32 -8, i32 -8>		.loc	1 7 18 is_stmt 1        # test/test1.c:7:18
LLVM IR Instruction [39]:   %36 = add <4 x i32> %28, <i32 -12, i32 -12, i32 -12, i32 -12>		pshufd	$245, %xmm1, %xmm5      # xmm5 = xmm1[1,1,3,3]
LLVM IR Instruction [40]:   %37 = mul <4 x i32> %33, %35, !dbg !36		pshufd	$245, %xmm6, %xmm7      # xmm7 = xmm6[1,1,3,3]
LLVM IR Instruction [41]:   %38 = mul <4 x i32> %34, %36, !dbg !36		pmuludq	%xmm5, %xmm7
LLVM IR Instruction [42]:   %39 = add <4 x i32> %28, <i32 -16, i32 -16, i32 -16, i32 -16>		pmuludq	%xmm6, %xmm1
LLVM IR Instruction [43]:   %40 = add <4 x i32> %28, <i32 -20, i32 -20, i32 -20, i32 -20>		pshufd	$245, %xmm4, %xmm5      # xmm5 = xmm4[1,1,3,3]
LLVM IR Instruction [44]:   %41 = mul <4 x i32> %37, %39, !dbg !36		pshufd	$245, %xmm0, %xmm2      # xmm2 = xmm0[1,1,3,3]
LLVM IR Instruction [45]:   %42 = mul <4 x i32> %38, %40, !dbg !36		pmuludq	%xmm5, %xmm2
LLVM IR Instruction [46]:   %43 = add <4 x i32> %28, <i32 -24, i32 -24, i32 -24, i32 -24>		pmuludq	%xmm4, %xmm0
LLVM IR Instruction [47]:   %44 = add <4 x i32> %28, <i32 -28, i32 -28, i32 -28, i32 -28>		movdqa	%xmm6, %xmm4
LLVM IR Instruction [48]:   %45 = mul <4 x i32> %41, %43, !dbg !36		paddd	.LCPI0_3, %xmm4
LLVM IR Instruction [49]:   %46 = mul <4 x i32> %42, %44, !dbg !36		movdqa	%xmm6, %xmm5
LLVM IR Instruction [50]:   %47 = add <4 x i32> %28, <i32 -32, i32 -32, i32 -32, i32 -32>		paddd	.LCPI0_4, %xmm5
LLVM IR Instruction [51]:   %48 = add i32 %31, -4		pmuludq	%xmm4, %xmm1
LLVM IR Instruction [52]:   %49 = icmp eq i32 %48, 0		pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
LLVM IR Instruction [53]:   br i1 %49, label %50, label %27, !llvm.loop !37		pmuludq	%xmm7, %xmm4
LLVM IR Instruction [54]:   %51 = phi <4 x i32> [ undef, %14 ], [ %45, %27 ]		pmuludq	%xmm5, %xmm0
LLVM IR Instruction [55]:   %52 = phi <4 x i32> [ undef, %14 ], [ %46, %27 ]		pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
LLVM IR Instruction [56]:   %53 = phi <4 x i32> [ %19, %14 ], [ %47, %27 ]		pmuludq	%xmm2, %xmm5
LLVM IR Instruction [57]:   %54 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %14 ], [ %45, %27 ]		movdqa	%xmm6, %xmm2
LLVM IR Instruction [58]:   %55 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %14 ], [ %46, %27 ]		paddd	.LCPI0_5, %xmm2
LLVM IR Instruction [59]:   %56 = icmp eq i32 %23, 0		pshufd	$245, %xmm2, %xmm7      # xmm7 = xmm2[1,1,3,3]
LLVM IR Instruction [60]:   br i1 %56, label %68, label %57		pmuludq	%xmm4, %xmm7
LLVM IR Instruction [61]:   %58 = phi <4 x i32> [ %65, %57 ], [ %53, %50 ]		movdqa	%xmm6, %xmm4
LLVM IR Instruction [62]:   %59 = phi <4 x i32> [ %63, %57 ], [ %54, %50 ]		paddd	.LCPI0_6, %xmm4
LLVM IR Instruction [63]:   %60 = phi <4 x i32> [ %64, %57 ], [ %55, %50 ]		pmuludq	%xmm1, %xmm2
LLVM IR Instruction [64]:   %61 = phi i32 [ %66, %57 ], [ %23, %50 ]		pshufd	$245, %xmm4, %xmm3      # xmm3 = xmm4[1,1,3,3]
LLVM IR Instruction [65]:   %62 = add <4 x i32> %58, <i32 -4, i32 -4, i32 -4, i32 -4>		pmuludq	%xmm5, %xmm3
LLVM IR Instruction [66]:   %63 = mul <4 x i32> %59, %58, !dbg !36		pmuludq	%xmm0, %xmm4
LLVM IR Instruction [67]:   %64 = mul <4 x i32> %60, %62, !dbg !36		movdqa	%xmm6, %xmm0
LLVM IR Instruction [68]:   %65 = add <4 x i32> %58, <i32 -8, i32 -8, i32 -8, i32 -8>		paddd	.LCPI0_7, %xmm0
LLVM IR Instruction [69]:   %66 = add i32 %61, -1		pmuludq	%xmm0, %xmm2
LLVM IR Instruction [70]:   %67 = icmp eq i32 %66, 0		pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
LLVM IR Instruction [71]:   br i1 %67, label %68, label %57, !llvm.loop !39		pmuludq	%xmm7, %xmm0
LLVM IR Instruction [72]:   %69 = phi <4 x i32> [ %51, %50 ], [ %63, %57 ], !dbg !36		pshufd	$232, %xmm2, %xmm1      # xmm1 = xmm2[0,2,2,3]
LLVM IR Instruction [73]:   %70 = phi <4 x i32> [ %52, %50 ], [ %64, %57 ], !dbg !36		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
LLVM IR Instruction [74]:   %71 = mul <4 x i32> %70, %69, !dbg !35		punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
LLVM IR Instruction [75]:   %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !35		movdqa	%xmm6, %xmm0
LLVM IR Instruction [76]:   %73 = mul <4 x i32> %71, %72, !dbg !35		paddd	.LCPI0_8, %xmm0
LLVM IR Instruction [77]:   %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !35		pmuludq	%xmm0, %xmm4
LLVM IR Instruction [78]:   %75 = mul <4 x i32> %73, %74, !dbg !35		pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
LLVM IR Instruction [79]:   %76 = extractelement <4 x i32> %75, i32 0, !dbg !35		pmuludq	%xmm3, %xmm0
LLVM IR Instruction [80]:   %77 = icmp eq i32 %12, %15, !dbg !35		pshufd	$232, %xmm4, %xmm4      # xmm4 = xmm4[0,2,2,3]
LLVM IR Instruction [81]:   br i1 %77, label %87, label %78, !dbg !35		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
LLVM IR Instruction [82]:   %79 = phi i32 [ %5, %11 ], [ %16, %68 ]		punpckldq	%xmm0, %xmm4    # xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1]
LLVM IR Instruction [83]:   %80 = phi i32 [ 1, %11 ], [ %76, %68 ]		paddd	.LCPI0_9, %xmm6
LLVM IR Instruction [84]:   br label %81, !dbg !35		addl	$4, %edi
LLVM IR Instruction [85]:   %82 = phi i32 [ %84, %81 ], [ %79, %78 ]		jne	.LBB0_5
LLVM IR Instruction [86]:   %83 = phi i32 [ %85, %81 ], [ %80, %78 ]	.Ltmp8:
LLVM IR Instruction [87]:   call void @llvm.dbg.value(metadata i32 %82, metadata !12, metadata !DIExpression()), !dbg !44	.LBB0_6:
LLVM IR Instruction [88]:   %84 = add nsw i32 %82, -1, !dbg !41		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [89]:   %85 = mul nsw i32 %83, %82, !dbg !36		movdqa	%xmm1, %xmm5
LLVM IR Instruction [90]:   call void @llvm.dbg.value(metadata i32 %84, metadata !12, metadata !DIExpression()), !dbg !44		movdqa	%xmm4, %xmm0
LLVM IR Instruction [91]:   %86 = icmp slt i32 %82, 3, !dbg !33		testl	%eax, %eax
LLVM IR Instruction [92]:   br i1 %86, label %87, label %81, !dbg !35, !llvm.loop !42		je	.LBB0_9
LLVM IR Instruction [93]:   %88 = phi i32 [ 1, %9 ], [ %76, %68 ], [ %85, %81 ]	.Ltmp9:
LLVM IR Instruction [94]:   %89 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 %5, i32 %88), !dbg !44	# %bb.7:                                # %.preheader
LLVM IR Instruction [95]:   br label %90		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
LLVM IR Instruction [96]:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #6, !dbg !45		.loc	1 0 18 is_stmt 0        # test/test1.c:0:18
LLVM IR Instruction [97]:   ret i32 0, !dbg !46		negl	%eax
		movdqa	.LCPI0_2, %xmm2         # xmm2 = [4294967292,4294967292,4294967292,4294967292]
		movdqa	.LCPI0_3, %xmm3         # xmm3 = [4294967288,4294967288,4294967288,4294967288]
	.Ltmp10:
		.p2align	4, 0x90
	.LBB0_8:                                # =>This Inner Loop Header: Depth=1
		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
		movdqa	%xmm6, %xmm0
		paddd	%xmm2, %xmm0
		.loc	1 7 18                  # test/test1.c:7:18
		movdqa	%xmm6, %xmm5
		pmuludq	%xmm1, %xmm5
		pshufd	$232, %xmm5, %xmm5      # xmm5 = xmm5[0,2,2,3]
		pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
		pshufd	$245, %xmm6, %xmm7      # xmm7 = xmm6[1,1,3,3]
		pmuludq	%xmm1, %xmm7
		pshufd	$232, %xmm7, %xmm1      # xmm1 = xmm7[0,2,2,3]
		punpckldq	%xmm1, %xmm5    # xmm5 = xmm5[0],xmm1[0],xmm5[1],xmm1[1]
		pshufd	$245, %xmm0, %xmm1      # xmm1 = xmm0[1,1,3,3]
		pmuludq	%xmm4, %xmm0
		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
		pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
		pmuludq	%xmm1, %xmm4
		pshufd	$232, %xmm4, %xmm1      # xmm1 = xmm4[0,2,2,3]
		punpckldq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
		paddd	%xmm3, %xmm6
		movdqa	%xmm5, %xmm1
		movdqa	%xmm0, %xmm4
		incl	%eax
		jne	.LBB0_8
	.Ltmp11:
	.LBB0_9:
		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
		.loc	1 4 9 is_stmt 1         # test/test1.c:4:9
		pshufd	$245, %xmm5, %xmm1      # xmm1 = xmm5[1,1,3,3]
		pshufd	$245, %xmm0, %xmm2      # xmm2 = xmm0[1,1,3,3]
		pmuludq	%xmm1, %xmm2
		pmuludq	%xmm5, %xmm0
		pshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
		pmuludq	%xmm0, %xmm1
		pshufd	$10, %xmm2, %xmm0       # xmm0 = xmm2[2,2,0,0]
		pmuludq	%xmm2, %xmm0
		pmuludq	%xmm1, %xmm0
		movd	%xmm0, %eax
		cmpl	%esi, %edx
		je	.LBB0_12
	.Ltmp12:
	# %bb.10:
		#DEBUG_VALUE: factorial:n <- [DW_OP_plus_uconst 16] [$esp+0]
		.loc	1 0 9 is_stmt 0         # test/test1.c:0:9
		subl	%esi, %ecx
	.Ltmp13:
		.p2align	4, 0x90
	.LBB0_11:                               # =>This Inner Loop Header: Depth=1
		#DEBUG_VALUE: factorial:n <- $ecx
		.loc	1 7 18 is_stmt 1        # test/test1.c:7:18
		imull	%ecx, %eax
		.loc	1 4 11                  # test/test1.c:4:11
		cmpl	$2, %ecx
		.loc	1 7 32                  # test/test1.c:7:32
		leal	-1(%ecx), %ecx
	.Ltmp14:
		.loc	1 4 9                   # test/test1.c:4:9
		jg	.LBB0_11
	.LBB0_12:
		.loc	1 8 1                   # test/test1.c:8:1
		popl	%esi
		.cfi_def_cfa_offset 12
		popl	%edi
		.cfi_def_cfa_offset 8
		popl	%ebx
		.cfi_def_cfa_offset 4
		retl
	.Ltmp15:
	.Lfunc_end0:
		.size	factorial, .Lfunc_end0-factorial
		.cfi_endproc
	                                        # -- End function
		.section	.rodata.cst16,"aM",@progbits,16
		.p2align	4               # -- Begin function main
	.LCPI1_0:
		.long	0                       # 0x0
		.long	4294967295              # 0xffffffff
		.long	4294967294              # 0xfffffffe
		.long	4294967293              # 0xfffffffd
	.LCPI1_1:
		.long	1                       # 0x1
		.long	1                       # 0x1
		.long	1                       # 0x1
		.long	1                       # 0x1
	.LCPI1_2:
		.long	4294967292              # 0xfffffffc
		.long	4294967292              # 0xfffffffc
		.long	4294967292              # 0xfffffffc
		.long	4294967292              # 0xfffffffc
	.LCPI1_3:
		.long	4294967288              # 0xfffffff8
		.long	4294967288              # 0xfffffff8
		.long	4294967288              # 0xfffffff8
		.long	4294967288              # 0xfffffff8
	.LCPI1_4:
		.long	4294967284              # 0xfffffff4
		.long	4294967284              # 0xfffffff4
		.long	4294967284              # 0xfffffff4
		.long	4294967284              # 0xfffffff4
	.LCPI1_5:
		.long	4294967280              # 0xfffffff0
		.long	4294967280              # 0xfffffff0
		.long	4294967280              # 0xfffffff0
		.long	4294967280              # 0xfffffff0
	.LCPI1_6:
		.long	4294967276              # 0xffffffec
		.long	4294967276              # 0xffffffec
		.long	4294967276              # 0xffffffec
		.long	4294967276              # 0xffffffec
	.LCPI1_7:
		.long	4294967272              # 0xffffffe8
		.long	4294967272              # 0xffffffe8
		.long	4294967272              # 0xffffffe8
		.long	4294967272              # 0xffffffe8
	.LCPI1_8:
		.long	4294967268              # 0xffffffe4
		.long	4294967268              # 0xffffffe4
		.long	4294967268              # 0xffffffe4
		.long	4294967268              # 0xffffffe4
	.LCPI1_9:
		.long	4294967264              # 0xffffffe0
		.long	4294967264              # 0xffffffe0
		.long	4294967264              # 0xffffffe0
		.long	4294967264              # 0xffffffe0
		.text
		.globl	main
		.p2align	4, 0x90
		.type	main,@function
	main:                                   # @main
	.Lfunc_begin1:
		.loc	1 10 0                  # test/test1.c:10:0
		.cfi_startproc
	# %bb.0:
		pushl	%ebx
		.cfi_def_cfa_offset 8
		pushl	%edi
		.cfi_def_cfa_offset 12
		pushl	%esi
		.cfi_def_cfa_offset 16
		subl	$16, %esp
		.cfi_def_cfa_offset 32
		.cfi_offset %esi, -16
		.cfi_offset %edi, -12
		.cfi_offset %ebx, -8
		.loc	1 12 5 prologue_end     # test/test1.c:12:5
		movl	$.L.str, (%esp)
		calll	printf
	.Ltmp16:
		#DEBUG_VALUE: main:num <- [DW_OP_plus_uconst 12, DW_OP_deref] $esp
		.loc	1 0 5 is_stmt 0         # test/test1.c:0:5
		leal	12(%esp), %eax
		.loc	1 13 5 is_stmt 1        # test/test1.c:13:5
		movl	%eax, 4(%esp)
		movl	$.L.str.1, (%esp)
		calll	__isoc99_scanf
	.Ltmp17:
		.loc	1 15 9                  # test/test1.c:15:9
		movl	12(%esp), %eax
	.Ltmp18:
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 15 13 is_stmt 0       # test/test1.c:15:13
		testl	%eax, %eax
	.Ltmp19:
		.loc	1 15 9                  # test/test1.c:15:9
		js	.LBB1_1
	.Ltmp20:
	# %bb.2:
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 0 9                   # test/test1.c:0:9
		movl	$1, %esi
	.Ltmp21:
		#DEBUG_VALUE: factorial:n <- $eax
		.loc	1 4 11 is_stmt 1        # test/test1.c:4:11
		cmpl	$2, %eax
	.Ltmp22:
		.loc	1 4 9 is_stmt 0         # test/test1.c:4:9
		jl	.LBB1_14
	.Ltmp23:
	# %bb.3:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		leal	-1(%eax), %ecx
		movl	$1, %esi
		movl	%eax, %edi
		cmpl	$8, %ecx
		jb	.LBB1_13
	.Ltmp24:
	# %bb.4:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		movl	%ecx, %edx
		andl	$-8, %edx
		movd	%eax, %xmm0
		pshufd	$0, %xmm0, %xmm6        # xmm6 = xmm0[0,0,0,0]
		paddd	.LCPI1_0, %xmm6
		leal	-8(%edx), %edi
		movl	%edi, %ebx
		shrl	$3, %ebx
		addl	$1, %ebx
		movl	%ebx, %esi
		andl	$3, %esi
		cmpl	$24, %edi
		jae	.LBB1_6
	.Ltmp25:
	# %bb.5:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 0 9                   # test/test1.c:0:9
		movdqa	.LCPI1_1, %xmm1         # xmm1 = [1,1,1,1]
		movdqa	%xmm1, %xmm2
		jmp	.LBB1_8
	.Ltmp26:
	.LBB1_1:
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 16 9 is_stmt 1        # test/test1.c:16:9
		movl	$.Lstr, (%esp)
		calll	puts
	.Ltmp27:
		.loc	1 0 9 is_stmt 0         # test/test1.c:0:9
		jmp	.LBB1_15
	.LBB1_6:
	.Ltmp28:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 4 9 is_stmt 1         # test/test1.c:4:9
		movl	%esi, %edi
		subl	%ebx, %edi
		movdqa	.LCPI1_1, %xmm1         # xmm1 = [1,1,1,1]
		movdqa	%xmm1, %xmm2
	.Ltmp29:
		.p2align	4, 0x90
	.LBB1_7:                                # =>This Inner Loop Header: Depth=1
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 0 9 is_stmt 0         # test/test1.c:0:9
		movdqa	%xmm6, %xmm0
		paddd	.LCPI1_2, %xmm0
	.Ltmp30:
		.loc	1 7 18 is_stmt 1        # test/test1.c:7:18
		pshufd	$245, %xmm6, %xmm7      # xmm7 = xmm6[1,1,3,3]
		pshufd	$245, %xmm1, %xmm3      # xmm3 = xmm1[1,1,3,3]
		pmuludq	%xmm7, %xmm3
		pmuludq	%xmm6, %xmm1
		pshufd	$245, %xmm2, %xmm7      # xmm7 = xmm2[1,1,3,3]
		pshufd	$245, %xmm0, %xmm4      # xmm4 = xmm0[1,1,3,3]
		pmuludq	%xmm7, %xmm4
		pmuludq	%xmm2, %xmm0
		movdqa	%xmm6, %xmm2
		paddd	.LCPI1_3, %xmm2
		movdqa	%xmm6, %xmm7
		paddd	.LCPI1_4, %xmm7
		pmuludq	%xmm2, %xmm1
		pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
		pmuludq	%xmm3, %xmm2
		pmuludq	%xmm7, %xmm0
		pshufd	$245, %xmm7, %xmm3      # xmm3 = xmm7[1,1,3,3]
		pmuludq	%xmm4, %xmm3
		movdqa	%xmm6, %xmm4
		paddd	.LCPI1_5, %xmm4
		pshufd	$245, %xmm4, %xmm7      # xmm7 = xmm4[1,1,3,3]
		pmuludq	%xmm2, %xmm7
		movdqa	%xmm6, %xmm2
		paddd	.LCPI1_6, %xmm2
		pmuludq	%xmm1, %xmm4
		pshufd	$245, %xmm2, %xmm5      # xmm5 = xmm2[1,1,3,3]
		pmuludq	%xmm3, %xmm5
		pmuludq	%xmm0, %xmm2
		movdqa	%xmm6, %xmm0
		paddd	.LCPI1_7, %xmm0
		pmuludq	%xmm0, %xmm4
		pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
		pmuludq	%xmm7, %xmm0
		pshufd	$232, %xmm4, %xmm1      # xmm1 = xmm4[0,2,2,3]
		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
		punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
		movdqa	%xmm6, %xmm0
		paddd	.LCPI1_8, %xmm0
		pmuludq	%xmm0, %xmm2
		pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
		pmuludq	%xmm5, %xmm0
		pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
		punpckldq	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1]
		paddd	.LCPI1_9, %xmm6
		addl	$4, %edi
		jne	.LBB1_7
	.Ltmp31:
	.LBB1_8:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 0 18 is_stmt 0        # test/test1.c:0:18
		testl	%esi, %esi
		je	.LBB1_11
	.Ltmp32:
	# %bb.9:                                # %.preheader
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		negl	%esi
		movdqa	.LCPI1_2, %xmm3         # xmm3 = [4294967292,4294967292,4294967292,4294967292]
		movdqa	.LCPI1_3, %xmm4         # xmm4 = [4294967288,4294967288,4294967288,4294967288]
	.Ltmp33:
		.p2align	4, 0x90
	.LBB1_10:                               # =>This Inner Loop Header: Depth=1
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		movdqa	%xmm6, %xmm0
		paddd	%xmm3, %xmm0
		.loc	1 7 18                  # test/test1.c:7:18
		pshufd	$245, %xmm1, %xmm5      # xmm5 = xmm1[1,1,3,3]
		pmuludq	%xmm6, %xmm1
		pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
		pshufd	$245, %xmm6, %xmm7      # xmm7 = xmm6[1,1,3,3]
		pmuludq	%xmm5, %xmm7
		pshufd	$232, %xmm7, %xmm5      # xmm5 = xmm7[0,2,2,3]
		punpckldq	%xmm5, %xmm1    # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1]
		pshufd	$245, %xmm2, %xmm5      # xmm5 = xmm2[1,1,3,3]
		pmuludq	%xmm0, %xmm2
		pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
		pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
		pmuludq	%xmm5, %xmm0
		pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
		punpckldq	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1]
		paddd	%xmm4, %xmm6
		incl	%esi
		jne	.LBB1_10
	.Ltmp34:
	.LBB1_11:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 4 9 is_stmt 1         # test/test1.c:4:9
		pshufd	$245, %xmm1, %xmm0      # xmm0 = xmm1[1,1,3,3]
		pshufd	$245, %xmm2, %xmm3      # xmm3 = xmm2[1,1,3,3]
		pmuludq	%xmm0, %xmm3
		pmuludq	%xmm1, %xmm2
		pshufd	$78, %xmm2, %xmm0       # xmm0 = xmm2[2,3,0,1]
		pmuludq	%xmm2, %xmm0
		pshufd	$10, %xmm3, %xmm1       # xmm1 = xmm3[2,2,0,0]
		pmuludq	%xmm3, %xmm1
		pmuludq	%xmm0, %xmm1
		movd	%xmm1, %esi
		cmpl	%edx, %ecx
		je	.LBB1_14
	.Ltmp35:
	# %bb.12:
		#DEBUG_VALUE: factorial:n <- $eax
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 0 9 is_stmt 0         # test/test1.c:0:9
		movl	%eax, %edi
		subl	%edx, %edi
	.Ltmp36:
		.p2align	4, 0x90
	.LBB1_13:                               # =>This Inner Loop Header: Depth=1
		#DEBUG_VALUE: main:num <- $eax
		#DEBUG_VALUE: factorial:n <- $edi
		.loc	1 7 18 is_stmt 1        # test/test1.c:7:18
		imull	%edi, %esi
		.loc	1 4 11                  # test/test1.c:4:11
		cmpl	$2, %edi
		.loc	1 7 32                  # test/test1.c:7:32
		leal	-1(%edi), %edi
	.Ltmp37:
		.loc	1 4 9                   # test/test1.c:4:9
		jg	.LBB1_13
	.Ltmp38:
	.LBB1_14:
		#DEBUG_VALUE: main:num <- $eax
		.loc	1 18 9                  # test/test1.c:18:9
		movl	%esi, 8(%esp)
		movl	%eax, 4(%esp)
		movl	$.L.str.3, (%esp)
		calll	printf
	.Ltmp39:
	.LBB1_15:
		.loc	1 20 5                  # test/test1.c:20:5
		xorl	%eax, %eax
		addl	$16, %esp
		.cfi_def_cfa_offset 16
		popl	%esi
		.cfi_def_cfa_offset 12
		popl	%edi
		.cfi_def_cfa_offset 8
		popl	%ebx
		.cfi_def_cfa_offset 4
		retl
	.Ltmp40:
	.Lfunc_end1:
		.size	main, .Lfunc_end1-main
		.cfi_endproc
	                                        # -- End function
		.type	.L.str,@object          # @.str
		.section	.rodata.str1.1,"aMS",@progbits,1
	.L.str:
		.asciz	"Enter a positive integer: "
		.size	.L.str, 27
	
		.type	.L.str.1,@object        # @.str.1
	.L.str.1:
		.asciz	"%d"
		.size	.L.str.1, 3
	
		.type	.L.str.3,@object        # @.str.3
	.L.str.3:
		.asciz	"Factorial of %d is %d\n"
		.size	.L.str.3, 23
	
		.type	.Lstr,@object           # @str
	.Lstr:
		.asciz	"Factorial is not defined for negative numbers."
		.size	.Lstr, 47
	
		.section	.debug_str,"MS",@progbits,1
	.Linfo_string0:
		.asciz	"clang version 10.0.0-4ubuntu1 " # string offset=0
	.Linfo_string1:
		.asciz	"test/test1.c"          # string offset=31
	.Linfo_string2:
		.asciz	"/home/toobak/OptiCortex/mapper" # string offset=44
	.Linfo_string3:
		.asciz	"factorial"             # string offset=75
	.Linfo_string4:
		.asciz	"int"                   # string offset=85
	.Linfo_string5:
		.asciz	"n"                     # string offset=89
	.Linfo_string6:
		.asciz	"main"                  # string offset=91
	.Linfo_string7:
		.asciz	"num"                   # string offset=96
		.section	.debug_loc,"",@progbits
	.Ldebug_loc0:
		.long	.Ltmp0-.Lfunc_begin0
		.long	.Ltmp13-.Lfunc_begin0
		.short	2                       # Loc expr size
		.byte	116                     # DW_OP_breg4
		.byte	16                      # 16
		.long	.Ltmp13-.Lfunc_begin0
		.long	.Ltmp14-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	81                      # DW_OP_reg1
		.long	0
		.long	0
	.Ldebug_loc1:
		.long	.Ltmp16-.Lfunc_begin0
		.long	.Ltmp18-.Lfunc_begin0
		.short	2                       # Loc expr size
		.byte	116                     # DW_OP_breg4
		.byte	12                      # 12
		.long	.Ltmp18-.Lfunc_begin0
		.long	.Ltmp27-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	80                      # DW_OP_reg0
		.long	.Ltmp28-.Lfunc_begin0
		.long	.Ltmp39-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	80                      # DW_OP_reg0
		.long	0
		.long	0
	.Ldebug_loc2:
		.long	.Ltmp21-.Lfunc_begin0
		.long	.Ltmp26-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	80                      # DW_OP_reg0
		.long	.Ltmp28-.Lfunc_begin0
		.long	.Ltmp36-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	80                      # DW_OP_reg0
		.long	.Ltmp36-.Lfunc_begin0
		.long	.Ltmp37-.Lfunc_begin0
		.short	1                       # Loc expr size
		.byte	87                      # DW_OP_reg7
		.long	0
		.long	0
		.section	.debug_abbrev,"",@progbits
		.byte	1                       # Abbreviation Code
		.byte	17                      # DW_TAG_compile_unit
		.byte	1                       # DW_CHILDREN_yes
		.byte	37                      # DW_AT_producer
		.byte	14                      # DW_FORM_strp
		.byte	19                      # DW_AT_language
		.byte	5                       # DW_FORM_data2
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	16                      # DW_AT_stmt_list
		.byte	23                      # DW_FORM_sec_offset
		.byte	27                      # DW_AT_comp_dir
		.byte	14                      # DW_FORM_strp
		.byte	17                      # DW_AT_low_pc
		.byte	1                       # DW_FORM_addr
		.byte	18                      # DW_AT_high_pc
		.byte	6                       # DW_FORM_data4
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	2                       # Abbreviation Code
		.byte	46                      # DW_TAG_subprogram
		.byte	1                       # DW_CHILDREN_yes
		.byte	17                      # DW_AT_low_pc
		.byte	1                       # DW_FORM_addr
		.byte	18                      # DW_AT_high_pc
		.byte	6                       # DW_FORM_data4
		.byte	64                      # DW_AT_frame_base
		.byte	24                      # DW_FORM_exprloc
		.ascii	"\227B"                 # DW_AT_GNU_all_call_sites
		.byte	25                      # DW_FORM_flag_present
		.byte	49                      # DW_AT_abstract_origin
		.byte	19                      # DW_FORM_ref4
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	3                       # Abbreviation Code
		.byte	5                       # DW_TAG_formal_parameter
		.byte	0                       # DW_CHILDREN_no
		.byte	2                       # DW_AT_location
		.byte	23                      # DW_FORM_sec_offset
		.byte	49                      # DW_AT_abstract_origin
		.byte	19                      # DW_FORM_ref4
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	4                       # Abbreviation Code
		.byte	46                      # DW_TAG_subprogram
		.byte	1                       # DW_CHILDREN_yes
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	58                      # DW_AT_decl_file
		.byte	11                      # DW_FORM_data1
		.byte	59                      # DW_AT_decl_line
		.byte	11                      # DW_FORM_data1
		.byte	39                      # DW_AT_prototyped
		.byte	25                      # DW_FORM_flag_present
		.byte	73                      # DW_AT_type
		.byte	19                      # DW_FORM_ref4
		.byte	63                      # DW_AT_external
		.byte	25                      # DW_FORM_flag_present
		.byte	32                      # DW_AT_inline
		.byte	11                      # DW_FORM_data1
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	5                       # Abbreviation Code
		.byte	5                       # DW_TAG_formal_parameter
		.byte	0                       # DW_CHILDREN_no
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	58                      # DW_AT_decl_file
		.byte	11                      # DW_FORM_data1
		.byte	59                      # DW_AT_decl_line
		.byte	11                      # DW_FORM_data1
		.byte	73                      # DW_AT_type
		.byte	19                      # DW_FORM_ref4
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	6                       # Abbreviation Code
		.byte	36                      # DW_TAG_base_type
		.byte	0                       # DW_CHILDREN_no
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	62                      # DW_AT_encoding
		.byte	11                      # DW_FORM_data1
		.byte	11                      # DW_AT_byte_size
		.byte	11                      # DW_FORM_data1
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	7                       # Abbreviation Code
		.byte	46                      # DW_TAG_subprogram
		.byte	1                       # DW_CHILDREN_yes
		.byte	17                      # DW_AT_low_pc
		.byte	1                       # DW_FORM_addr
		.byte	18                      # DW_AT_high_pc
		.byte	6                       # DW_FORM_data4
		.byte	64                      # DW_AT_frame_base
		.byte	24                      # DW_FORM_exprloc
		.ascii	"\227B"                 # DW_AT_GNU_all_call_sites
		.byte	25                      # DW_FORM_flag_present
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	58                      # DW_AT_decl_file
		.byte	11                      # DW_FORM_data1
		.byte	59                      # DW_AT_decl_line
		.byte	11                      # DW_FORM_data1
		.byte	73                      # DW_AT_type
		.byte	19                      # DW_FORM_ref4
		.byte	63                      # DW_AT_external
		.byte	25                      # DW_FORM_flag_present
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	8                       # Abbreviation Code
		.byte	52                      # DW_TAG_variable
		.byte	0                       # DW_CHILDREN_no
		.byte	2                       # DW_AT_location
		.byte	23                      # DW_FORM_sec_offset
		.byte	3                       # DW_AT_name
		.byte	14                      # DW_FORM_strp
		.byte	58                      # DW_AT_decl_file
		.byte	11                      # DW_FORM_data1
		.byte	59                      # DW_AT_decl_line
		.byte	11                      # DW_FORM_data1
		.byte	73                      # DW_AT_type
		.byte	19                      # DW_FORM_ref4
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	9                       # Abbreviation Code
		.byte	29                      # DW_TAG_inlined_subroutine
		.byte	1                       # DW_CHILDREN_yes
		.byte	49                      # DW_AT_abstract_origin
		.byte	19                      # DW_FORM_ref4
		.byte	85                      # DW_AT_ranges
		.byte	23                      # DW_FORM_sec_offset
		.byte	88                      # DW_AT_call_file
		.byte	11                      # DW_FORM_data1
		.byte	89                      # DW_AT_call_line
		.byte	11                      # DW_FORM_data1
		.byte	87                      # DW_AT_call_column
		.byte	11                      # DW_FORM_data1
		.byte	0                       # EOM(1)
		.byte	0                       # EOM(2)
		.byte	0                       # EOM(3)
		.section	.debug_info,"",@progbits
	.Lcu_begin0:
		.long	.Ldebug_info_end0-.Ldebug_info_start0 # Length of Unit
	.Ldebug_info_start0:
		.short	4                       # DWARF version number
		.long	.debug_abbrev           # Offset Into Abbrev. Section
		.byte	4                       # Address Size (in bytes)
		.byte	1                       # Abbrev [1] 0xb:0x8f DW_TAG_compile_unit
		.long	.Linfo_string0          # DW_AT_producer
		.short	12                      # DW_AT_language
		.long	.Linfo_string1          # DW_AT_name
		.long	.Lline_table_start0     # DW_AT_stmt_list
		.long	.Linfo_string2          # DW_AT_comp_dir
		.long	.Lfunc_begin0           # DW_AT_low_pc
		.long	.Lfunc_end1-.Lfunc_begin0 # DW_AT_high_pc
		.byte	2                       # Abbrev [2] 0x26:0x19 DW_TAG_subprogram
		.long	.Lfunc_begin0           # DW_AT_low_pc
		.long	.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc
		.byte	1                       # DW_AT_frame_base
		.byte	84
	                                        # DW_AT_GNU_all_call_sites
		.long	63                      # DW_AT_abstract_origin
		.byte	3                       # Abbrev [3] 0x35:0x9 DW_TAG_formal_parameter
		.long	.Ldebug_loc0            # DW_AT_location
		.long	75                      # DW_AT_abstract_origin
		.byte	0                       # End Of Children Mark
		.byte	4                       # Abbrev [4] 0x3f:0x18 DW_TAG_subprogram
		.long	.Linfo_string3          # DW_AT_name
		.byte	1                       # DW_AT_decl_file
		.byte	3                       # DW_AT_decl_line
	                                        # DW_AT_prototyped
		.long	87                      # DW_AT_type
	                                        # DW_AT_external
		.byte	1                       # DW_AT_inline
		.byte	5                       # Abbrev [5] 0x4b:0xb DW_TAG_formal_parameter
		.long	.Linfo_string5          # DW_AT_name
		.byte	1                       # DW_AT_decl_file
		.byte	3                       # DW_AT_decl_line
		.long	87                      # DW_AT_type
		.byte	0                       # End Of Children Mark
		.byte	6                       # Abbrev [6] 0x57:0x7 DW_TAG_base_type
		.long	.Linfo_string4          # DW_AT_name
		.byte	5                       # DW_AT_encoding
		.byte	4                       # DW_AT_byte_size
		.byte	7                       # Abbrev [7] 0x5e:0x3b DW_TAG_subprogram
		.long	.Lfunc_begin1           # DW_AT_low_pc
		.long	.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc
		.byte	1                       # DW_AT_frame_base
		.byte	84
	                                        # DW_AT_GNU_all_call_sites
		.long	.Linfo_string6          # DW_AT_name
		.byte	1                       # DW_AT_decl_file
		.byte	10                      # DW_AT_decl_line
		.long	87                      # DW_AT_type
	                                        # DW_AT_external
		.byte	8                       # Abbrev [8] 0x73:0xf DW_TAG_variable
		.long	.Ldebug_loc1            # DW_AT_location
		.long	.Linfo_string7          # DW_AT_name
		.byte	1                       # DW_AT_decl_file
		.byte	11                      # DW_AT_decl_line
		.long	87                      # DW_AT_type
		.byte	9                       # Abbrev [9] 0x82:0x16 DW_TAG_inlined_subroutine
		.long	63                      # DW_AT_abstract_origin
		.long	.Ldebug_ranges0         # DW_AT_ranges
		.byte	1                       # DW_AT_call_file
		.byte	18                      # DW_AT_call_line
		.byte	48                      # DW_AT_call_column
		.byte	3                       # Abbrev [3] 0x8e:0x9 DW_TAG_formal_parameter
		.long	.Ldebug_loc2            # DW_AT_location
		.long	75                      # DW_AT_abstract_origin
		.byte	0                       # End Of Children Mark
		.byte	0                       # End Of Children Mark
		.byte	0                       # End Of Children Mark
	.Ldebug_info_end0:
		.section	.debug_ranges,"",@progbits
	.Ldebug_ranges0:
		.long	.Ltmp21-.Lfunc_begin0
		.long	.Ltmp25-.Lfunc_begin0
		.long	.Ltmp28-.Lfunc_begin0
		.long	.Ltmp38-.Lfunc_begin0
		.long	0
		.long	0
		.ident	"clang version 10.0.0-4ubuntu1 "
		.section	".note.GNU-stack","",@progbits
		.section	.debug_line,"",@progbits
	.Lline_table_start0:
